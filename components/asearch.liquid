<script>
/* asearch.js
 * CradleCMS auto complete search component
 * version 1.0.0
 */
const searchCSS = new CSSStyleSheet()

searchCSS.replaceSync(`
.asearch-wrapper {
    position:relative;
    width: inherit;
    display:flex;
    flex-direction: row;
    border:none;
    height:auto;
}
.asearch.show {
    display:block;
}

.asearch {
    position:absolute;
    display: none;
    margin: 0;
    top:0; 
    padding: 0;
    max-height: 24em;
    background: white;
    background-color: rgba(255,255,255,0.99);
    border: 1px solid lightgrey;
    border-top: none;
    border-radius: 0  0 0.25em 0.25em;
    overflow-y: scroll;
    z-index: 1000;
    text-align: right;
    width: 100%;
    -webkit-overflow-scrolling: touch;
    overscroll-behavior: contain;
}
.asearch div {
    margin-bottom: 0.25em;
    max-height: 5em;
    overflow: hidden;
    width:100%;
}

.asearch .not-found {
    padding-right: 0.5em;
}
.asearch div a {
    display: flex;
    flex-direction: row;
    padding: 0.25em 0.5em;
}

.asearch > *:hover {
    background: #fbfbfb;
    outline: 1px solid #efefef;
}
.asearch > * img {
    width: 2.25em;
    height: 2.25em;
    border-radius: 3px;
    margin-top: 0.25em;
    margin-right: 0.5em;
}
.asearch > * a {
    text-decoration: none;
    color: black;
}
.asearch > * h4 {
    margin: 0;
    font-size: 0.8em;
    font-weight: 500;
    text-align: left;
    padding: 0;
    display: flex;
    flex-basis: max-content;
}

.asearch > * h4 p {
    margin-left: auto;
    font-size: 1em;
}

.asearch > * p {
    font-size: 0.8em;
    color: grey;
    text-align: left;
}
.asearch > * div {
    display: flex;
    flex-direction:column;
}
.asearch > * strong {
    font-size: 0.8em;
    color: grey;
    margin-left: 1em;
    margin-bottom: 1em;
}
.asearch > * .sale {
    color:red;
}
.asearch > * i {
    font-size: 0.8em;
    color: grey;
    text-decoration: line-through;
}
`)

class AutoSearch extends HTMLElement {
    options = {
        source      : "/search",            // search endpoint
    	notFound	: "no results",         // not found message
    	handle      : "",                   // search handle
    	delay       : 250,         	        // search delay in ms
        chars       : 3,                    // input threshold
        include     : ["pages","articles","products"],
        filter      : ["title","image","lang","currency","featured_image","meta.description","price","compare_at_price"],
        limit       : 10,
        truncate    : 100,
        lang        : '',
        currency    : '',
    }
    #q = {                                  // search query
        query: "",
	    include: [],
	    filter: [],
	    limit: 0,
	    handle: "",
	    lang: "",
	    currency: "",
    }
    #timer
    #visible
    #target
    #el
    
    connectedCallback() {
        this.className="asearch-wrapper";
        // FIXME: this.attachShadow({ mode: "open" }).adoptedStyleSheets = [searchCSS]
        document.adoptedStyleSheets = [searchCSS];
        // apply configuration through attributes
        let intVal = 0;
        for(const [i,a] of Object.entries(Array.from(this.attributes))) {
            if(this.options.hasOwnProperty(a.name)) {
                switch(a.name) {
                    case "include":
                    case "filter":
                        if(a.value) {
                            this.options[a.name] = a.value.split(",");
                        }
                        break;
                    case "delay":
                    case "chars":
                    case "limit":
                    case "truncate":
                        intVal = parseInt(a.value);
                        if(intVal != NaN) {
                            this.options[a.name] = intVal;
                        }
                        break;
                    default:
                        this.options[a.name] = a.value;
                        break;
                }
            }
        }
        this.#target = this.querySelector("input");
        this.#target.addEventListener("input",  ev => {
            this.#input(ev)
        });
       
        let include = this.querySelector('[name="include"]');
        if(include) {
            if(include.value) {
                this.options.include = include.value.split(",");
            }
            include.addEventListener("change",  x => {
                if(!x.target.value) {
                    this.#q.include = this.options.include;
                } else {
                    this.#q.include = x.target.value.split(",");
                }
                if(this.#q.query) {
                    this.#input();
                }
            });
        }
        this.#q.include = this.options.include;
        this.#q.filter = this.options.filter;
        this.#q.limit = this.options.limit;
        this.#q.handle = this.options.handle;
        this.#q.lang = this.options.lang;
        this.#q.currency = this.options.currency;
        
    	// setup result listing element
        let el = document.createElement("div");
        el.className = "asearch";
        let r = this.#target.getBoundingClientRect();
        el.style.top = r.height + "px";
        this.appendChild(el);
        this.#el = el;
    }
    
    
    toggle(state) {
        this.#visible = state === undefined ? !this.#visible : state;
        let el = this.#el;
        
	    if(this.#visible) {
	        el.classList.add("show");
	        document.addEventListener('click', close)
        } else {
            el.classList.remove("show");
            document.removeEventListener('click', close)
        }
    
        function close(ev) {
            if(!el.contains(ev.target)) { 
                el.classList.remove("show");
                document.removeEventListener('click', close)
            }
        }
    }
    #input(ev) {
        let search = this.#target.value;
        
        if(search.length >= this.options.chars){
            this.performSearch(search);
            this.toggle(true);
        } else {
            this.toggle(false);
        }
    
    }
    
    performSearch(query){
    	
    	// search deferal timer
    	if(this.#timer) {
    	    clearTimeout(this.#timer);
    	    this.#timer = null;
    	}
    
    	// search requests
    	this.#timer = setTimeout(() => {
    	    this.search(query);
    	}, this.options.delay);
    }

    search(query){
    	let self = this;
    	this.#q.query = query;
    	console.log("q", this.#q);
        return fetch(this.options.source, {
            method: "POST",
            body: JSON.stringify(this.#q),
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
            },
        }).then(res => {
            if(!res.ok) throw res;
            return res.json();
        }).then(res => {
            let data = {};
            for(const k of this.#q.include) {
                data[k] = res[k];
            }
            self.results(data,query)
        }).catch(err => {
            console.error(JSON.stringify(err));
        });

    }
    
    results(data,key){
    	let content = "";
        for(const [t,v] of Object.entries(data)){
        	if(Array.isArray(v)) {    
            	for(var i = 0, l = v.length; i < l; i++){
            	    if(typeof v[i] === 'object'){
            		    content+= this.format(v[i],t);
            	    }
            	}
        	}
        }
    	// if empty insert not found or hide
    	if(!content) {
    	    if(this.options.notFound) {
    		    content+= `<p class="not-found">`;
    		    content+= this.options.notFound;
    		    content+= "</p>";
    	    } else {
    	        this.toggle(false);
    	    }
    	}  
        this.#el.innerHTML = content;
    }

    format(item,t){
	    let h = "";
	    let title = item.title || "";
        let price = (item.price && parseFloat(item.price)) || 0;
	    let compareAtPrice = (item.compareAtPrice && parseFloat(item.compareAtPrice)) || 0;
	    let onSale = compareAtPrice > price;
        
        h+= `<div><a href="${item.url}" ${!item.url ? 'disabled="disabled"':''}>`;
        
        let src = "";
        if(item.featuredImage && item.featuredImage.src) src = item.featuredImage.src
        else if(item.image && item.image.src) src = item.image.src;
        
        if(src) {
            let d = src.lastIndexOf('.');
            src = src.slice(0,d) + "_50_50_cropped" + src.slice(d);
            h+= `<img src="/media/${t.slice(0,-1)}/${item.id}/${src}">`;
        }
        
        h += `<div><h4>${title}`;
        if(t == "products") {
            h += "<p>";
            if(onSale) {
                let cp = this.money(item,compareAtPrice);  
                h+= `<i>${cp}</i>`;                                
            }
            if(price) {
                let pp = this.money(item,price);
                h+= `<strong class="${(onSale ? 'sale' : '')}">${pp}</strong>`;
            }
            h += "</p>";
        }
        h += "</h4>";
        
        if(item.meta && item.meta.description) h+= `<p>${item.meta.description}</p>`;
	    
	    h += "</div></a></div>";
	    
	    return h;
	}
	
	
	money(item,value) {
	    return this.currency(item.lang,item.currency).format(value/1000)
	}
	
	#currency
	currency(l,c) {
	    if(this.#currency) return this.#currency;
	    l = l || this.#q.lang;
	    c = c || this.#q.currency;
	    let conf = {
            code: c,
            style: 'currency',
            currency: c,
            currencyDisplay: "narrowSymbol"
        };
        
        this.#currency = new Intl.NumberFormat(l,conf);
        return this.#currency;
    }
}

customElements.define('a-search', AutoSearch);
</script>
